{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAiCA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAxCOQ,SAASC,cAAc,SAE/BC,iBAAiB,UAE3B,SAAoBC,GACpBA,EAAMC,iBACD,MAAGZ,MAAAa,EAAKC,KAAEA,EAAIC,OAAEA,GAAWJ,EAAMK,cAAcC,SAEpD,GAAIJ,EAAMK,MAAQ,GAAKJ,EAAKI,MAAQ,GAAKH,EAAOG,MAAQ,EACtDC,EAAAvB,GAASwB,OAAOC,QAAQ,qCAExB,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAOG,MAAOI,IAAK,CACrC,IAAIC,EAAWD,EAAI,EACnB,MAAME,EAASC,OAAOZ,EAAMK,OAASJ,EAAKI,MAAQI,EAElDxB,EAAcyB,EAAUC,GACrBE,MAAK,EAAC3B,SAAEA,EAAQC,MAAEA,MACjBmB,EAAAvB,GAASwB,OAAOO,QACd,uBAAqB5B,QAAiBC,MAAU,IAGnD4B,OAAM,EAAC7B,SAAEA,EAAQC,MAAEA,MAClBmB,EAAAvB,GAASwB,OAAOS,QACd,sBAAoB9B,QAAiBC,MAAU,G,CAKzDW,EAAMK,cAAcc,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst promiseForm = document.querySelector('.form');\n\npromiseForm.addEventListener('submit', onSubmitForm); // po naciśnięciu przycisku \"Submit\" zostanie uruchomiona funkcja onSubmitForm\n\nfunction onSubmitForm(event) {\n  event.preventDefault(); // zapobiega domyślnej akcji przeglądarki, która polega na przeładowaniu strony po wysłaniu formularza\n  const { delay, step, amount } = event.currentTarget.elements;\n\n  if (delay.value < 0 || step.value < 0 || amount.value < 0) {\n    Notiflix.Notify.warning('Please enter correct number!');\n  } else {\n    for (let i = 0; i < amount.value; i++) {\n      let position = i + 1;\n      const delays = Number(delay.value) + step.value * i;\n\n      createPromise(position, delays)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          );\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          );\n        });\n    }\n  }\n  event.currentTarget.reset(); // po zakończeniu pętli resetujemy formularz, aby użytkownik mógł wprowadzić nowe dane i ponownie wysłać formularz\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","event","preventDefault","delay1","step","amount","currentTarget","elements","value","$parcel$interopDefault","Notify","warning","i","position1","delays","Number","then","success","catch","failure","reset"],"version":3,"file":"03-promises.1de17901.js.map"}